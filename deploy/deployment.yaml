apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: template-api-java
  name: template-api-java
spec:
  replicas: 1
  revisionHistoryLimit: 2
  selector:
    matchLabels:
      app: template-api-java
  strategy: { }
  template:
    metadata:
      labels:
        app: template-api-java
    spec:
      containers:
        - image: ${docker_registry}/it/template-api-java
          name: template-api-java
          imagePullPolicy: Always
          resources: { }
          envFrom:
            - secretRef:
                name: template-api-java
          readinessProbe:
            httpGet:
              path: /template-api-java/actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            failureThreshold: 5
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /template-api-java/actuator/health
              port: 8080
            initialDelaySeconds: 30
            periodSeconds: 60
            timeoutSeconds: 5
            failureThreshold: 3
            successThreshold: 1
          volumeMounts:
            - mountPath: /log
              name: log-volume
      volumes:
        - name: log-volume
          hostPath:
            path: /var/log/deployments/template-api-java
      tolerations:
        - key: "node.kubernetes.io/memory-pressure"
          operator: "Exists"
          effect: "NoSchedule"
        - key: "node.kubernetes.io/not-ready"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 0
        - key: "node.kubernetes.io/unreachable"
          operator: "Exists"
          effect: "NoExecute"
          tolerationSeconds: 0
---
apiVersion: v1
kind: Service
metadata:
  annotations:
    prometheus.io/path: /template-api-java/actuator/prometheus
    prometheus.io/port: "8080"
    prometheus.io/scrape: "true"
  labels:
    app: template-api-java
  name: template-api-java
  namespace: default
spec:
  ports:
    - name: 8080-8080
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: template-api-java
  type: ClusterIP
status:
  loadBalancer: { }